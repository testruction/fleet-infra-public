apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: backstage
spec:
  interval: 5m
  targetNamespace: backstage
  releaseName: backstage
  chart:
    spec:
      chart: backstage
      version: 1.8.2
      sourceRef:
        kind: HelmRepository
        name: backstage
      interval: 1m
  values:
    serviceAccount:
      create: true
      name: backstage
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /healthcheck
        port: 7007
        scheme: HTTP
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 2
      timeoutSeconds: 2
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /healthcheck
        port: 7007
        scheme: HTTP
      initialDelaySeconds: 60
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2
    service:
      type: LoadBalancer
      ports:
        backend: 8008
    postgresql:
      enabled: true
      auth:
        username: backstage
        password: hunter2
    metrics:
      serviceMonitor:
        enabled: true
    backstage:
      image:
        registry: ghcr.io
        repository: testruction/backstage/all-in-one
        tag: 1.20.0
      appConfig:
        app:
          title: Backstage tutorial
          baseUrl: http://localhost
          listen:
            host: 0.0.0.0
            port: 3000
        organization:
          name: Testruction
        backend:
          baseUrl: http://localhost
          listen:
            host: 0.0.0.0
            port: 7007
          csp:
            connect-src: ["'self'", 'http:', 'https:']
          cors:
            origin: http://localhost:3000
          database:
            client: pg
            connection:
              host: ${POSTGRES_HOST}
              port: ${POSTGRES_PORT}
              user: ${POSTGRES_USER}
              password: ${POSTGRES_PASSWORD}
        integrations: {}
        proxy:
          /prometheus0/api:
            target: http://prometheus-operated.monitoring:9090/api/v1/
        techdocs:
          builder: 'local'
          generator:
            runIn: 'local'
          publisher:
            type: 'local'
        auth:
          providers: {}
        scaffolder:
        catalog:
          import:
            entityFilename: catalog-info.yaml
            pullRequestBranchName: backstage-integration
          rules:
            - allow: [Component, System, API, Resource, Location]
          locations:
            - type: url
              target: https://github.com/testruction/backstage-tutorial/blob/main/entities/core/catalog-info.yaml
              rules:
                - allow: [User, Group, Domain]
            - type: url
              target: https://github.com/testruction/fastapi-sqlalchemy-cockroachdb/blob/main/catalog-info.yaml
            - type: url
              target: https://github.com/testruction/backstage-tutorial/blob/main/catalog-info.yaml
            - type: url
              target: https://github.com/testruction/backstage-tutorial/blob/main/entities/paypal/catalog-info.yaml
            - type: url
              target: https://github.com/testruction/backstage-tutorial/blob/main/entities/sock-shop/catalog-info.yaml
        kubernetes:
          serviceLocatorMethod:
            type: multiTenant
          clusterLocatorMethods:
            - type: config
              clusters:
                - url: kubernetes.default.svc.cluster.local
                  name: local
                  authProvider: serviceAccount
                  skipTLSVerify: false
                  skipMetricsLookup: true
        prometheus:
          proxyPath: /prometheus0/api
        argocd:
          # username: admin
          # password: admin
          appLocatorMethods:
            - type: 'config'
              instances:
                - name: argocd
                  url: http://gitops-argocd-server.argo-cd:10080
                  token: ${ARGOCD_AUTH_TOKEN}